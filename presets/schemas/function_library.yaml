# Function Library - 표현식에서 사용 가능한 함수 라이브러리
#
# 이 파일은 FunctionRegistry에 등록된 모든 함수의 메타데이터를 정의합니다.
# 사용자가 새로운 함수를 추가할 때 이 파일을 참고할 수 있습니다.

version: "1.0"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Moving Average Functions - 이동평균 함수
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

moving_average:
  ma:
    description: "단순 이동평균 (Simple Moving Average)"
    parameters:
      - name: period
        type: int
        description: "이동평균 기간 (예: 120)"
        required: true
    returns:
      type: float
      description: "이동평균 값"
    usage: "current.high >= ma(120)"
    examples:
      - "ma(5)  # 5일 이동평균"
      - "ma(20)  # 20일 이동평균"
      - "ma(120)  # 120일 이동평균"

  volume_ma:
    description: "거래량 이동평균"
    parameters:
      - name: period
        type: int
        description: "이동평균 기간"
        required: true
    returns:
      type: float
      description: "거래량 이동평균 값"
    usage: "current.volume >= volume_ma(20) * 3"
    examples:
      - "volume_ma(20)  # 20일 거래량 평균"
      - "volume_ma(60)  # 60일 거래량 평균"

  normalized_volume:
    description: "정규화된 거래량 (N일 평균 대비 비율, %)"
    parameters:
      - name: period
        type: int
        description: "평균 거래량 계산 기간"
        required: true
    returns:
      type: float
      description: "현재 거래량 / N일 평균 거래량 * 100 (%)"
    usage: "normalized_volume(20) >= 150.0"
    examples:
      - "normalized_volume(20)  # 20일 평균 대비 비율 (예: 150.0 = 평균의 150%)"
      - "normalized_volume(60) >= 200.0  # 60일 평균의 2배 이상"
      - "normalized_volume(120) < 50.0  # 120일 평균의 50% 미만 (거래량 감소)"
    notes:
      - "100%는 평균과 동일, 200%는 평균의 2배를 의미"
      - "거래량이 평균보다 많으면 100% 초과, 적으면 100% 미만"
      - "Normalized Volume = (Current Volume / MA Volume) * 100"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Time Functions - 시간 관련 함수
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

time:
  candles_between:
    description: "두 날짜 사이의 캔들(거래일) 수 계산"
    parameters:
      - name: start_date
        type: date
        description: "시작 날짜"
        required: true
      - name: end_date
        type: date
        description: "종료 날짜"
        required: true
    returns:
      type: int
      description: "거래일 수"
    usage: "candles_between(block1.started_at, current.date) >= 2"
    examples:
      - "candles_between(block1.started_at, current.date)  # Block1 시작부터 현재까지"
      - "candles_between(block2.ended_at, current.date)  # Block2 종료부터 현재까지"

  days_since:
    description: "특정 날짜로부터 경과한 일수 (현재 기준)"
    parameters:
      - name: past_date
        type: date
        description: "과거 날짜"
        required: true
    returns:
      type: int
      description: "경과 일수"
    usage: "days_since(block1.ended_at) <= 30"
    examples:
      - "days_since(block1.ended_at)  # Block1 종료 후 경과 일수"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Price Functions - 가격 관련 함수
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

price:
  within_range:
    description: "값이 기준 값의 ±N% 범위 내에 있는지 확인"
    parameters:
      - name: value
        type: float
        description: "확인할 값"
        required: true
      - name: base
        type: float
        description: "기준 값"
        required: true
      - name: tolerance_pct
        type: float
        description: "허용 오차 (%, 예: 10.0 = ±10%)"
        required: true
    returns:
      type: bool
      description: "범위 내 여부"
    usage: "within_range(current.close, block1.peak_price, 10.0)"
    examples:
      - "within_range(current.close, 10000, 5.0)  # 종가가 10000의 ±5% 범위 내"
      - "within_range(current.close, block1.peak_price, 10.0)  # Block1 고가의 ±10% 범위"

  is_new_high:
    description: "N일 내 최고가 여부 확인"
    parameters:
      - name: period
        type: int
        description: "확인 기간 (일)"
        required: true
    returns:
      type: bool
      description: "최고가 여부"
    usage: "is_new_high(120)"
    examples:
      - "is_new_high(120)  # 120일 내 최고가 갱신"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Volume Functions - 거래량 관련 함수
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

volume:
  is_volume_high:
    description: "거래량이 N개월 평균 대비 높은지 확인 (indicators에서 조회)"
    parameters:
      - name: period
        type: int
        description: "기간 (일, 예: 120)"
        required: true
    returns:
      type: bool
      description: "거래량 급등 여부"
    usage: "is_volume_high(120)"
    examples:
      - "is_volume_high(120)  # indicators['is_volume_high_120d'] 조회"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Technical Indicators - 기술 지표 함수
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

technical:
  rsi:
    description: "RSI (Relative Strength Index) 계산"
    parameters:
      - name: period
        type: int
        description: "RSI 기간 (일반적으로 14)"
        required: true
    returns:
      type: float
      description: "RSI 값 (0~100)"
    usage: "rsi(14) >= 70"
    examples:
      - "rsi(14) >= 70  # 과매수 구간"
      - "rsi(14) <= 30  # 과매도 구간"

  bollinger_upper:
    description: "볼린저 밴드 상단선"
    parameters:
      - name: period
        type: int
        description: "볼린저 밴드 기간 (일반적으로 20)"
        required: true
      - name: std_dev
        type: float
        description: "표준편차 배수 (기본값: 2.0)"
        required: false
        default: 2.0
    returns:
      type: float
      description: "볼린저 밴드 상단선 값"
    usage: "current.close >= bollinger_upper(20)"
    examples:
      - "bollinger_upper(20)  # 20일 볼린저 밴드 상단"

  bollinger_lower:
    description: "볼린저 밴드 하단선"
    parameters:
      - name: period
        type: int
        description: "볼린저 밴드 기간"
        required: true
      - name: std_dev
        type: float
        description: "표준편차 배수 (기본값: 2.0)"
        required: false
        default: 2.0
    returns:
      type: float
      description: "볼린저 밴드 하단선 값"
    usage: "current.close <= bollinger_lower(20)"
    examples:
      - "bollinger_lower(20)  # 20일 볼린저 밴드 하단"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Block Relationship Functions - 블록 관계 함수
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

block:
  EXISTS:
    description: "블록 존재 여부 확인"
    parameters:
      - name: block_name
        type: string
        description: "블록 변수명 (예: 'block1', 'block2')"
        required: true
    returns:
      type: bool
      description: "블록 존재 여부"
    usage: "EXISTS('block1')"
    examples:
      - "EXISTS('block1')  # Block1이 context에 존재하는지 확인"
      - "EXISTS('block2')  # Block2가 context에 존재하는지 확인"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Detection Functions - 블록 감지 관련 함수
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

detection:
  is_stay_spot:
    description: "회고적 spot 패턴 체크 - Block 유지 전략 (Stay Spot)"
    parameters:
      - name: prev_block_id
        type: str
        description: "이전 블록 ID (예: 'block1')"
        required: true
      - name: min_days
        type: int
        description: "최소 일수 (1 = D-1)"
        required: true
      - name: max_days
        type: int
        description: "최대 일수 (2 = D-2)"
        required: true
    returns:
      type: bool
      description: "True면 현재 블록에 spot 추가 (다음 블록으로 전환하지 않음), False면 다음 블록 생성"
    usage: "is_stay_spot('block1', 1, 2)"
    examples:
      - "is_stay_spot('block1', 1, 2)  # Block2 조건 만족 시 Block1에 spot 추가, Block2 생성 안 함"
      - "is_stay_spot('block2', 1, 2)  # Block3 조건 만족 시 Block2에 spot 추가, Block3 생성 안 함"
    notes:
      - "D-1, D-2일을 회고적으로 검사하여 spot_entry_conditions 만족 여부 확인"
      - "조건 만족 시 현재 블록에 spot 추가, 다음 블록으로 전환하지 않음 (블록 유지)"
      - "D-1 우선, D-2 대안 (둘 다 만족 시 D-1 선택)"
      - "spot_entry_conditions가 BlockNode에 정의되어 있어야 함"
      - "StaySpotStrategy에서 실제 회고 로직 수행"

  is_levelup_spot:
    description: "회고적 spot 패턴 체크 - Block 전환 전략 (Levelup Spot)"
    parameters:
      - name: prev_block_id
        type: str
        description: "이전 블록 ID (예: 'block1')"
        required: true
      - name: min_days
        type: int
        description: "최소 일수 (1 = D-1)"
        required: true
      - name: max_days
        type: int
        description: "최대 일수 (2 = D-2)"
        required: true
    returns:
      type: bool
      description: "True면 다음 블록 생성 (조기 시작), False면 일반 블록 생성"
    usage: "is_levelup_spot('block1', 1, 2)"
    examples:
      - "is_levelup_spot('block1', 1, 2)  # Block2 조건 만족 시 D-1 또는 D-2로 조기 시작"
    notes:
      - "D-1, D-2일을 회고적으로 검사하여 조건 만족 시 다음 블록 생성"
      - "다음 블록의 started_at을 D-1 또는 D-2로 조정 (조기 시작)"
      - "이전 블록은 (spot1 - 1일)에 자동 종료됨"
      - "D-1 우선, D-2 대안 (둘 다 만족 시 D-1 선택)"
      - "exclude_conditions로 제외할 조건 지정 가능"
      - "LevelupSpotStrategy에서 실제 회고 로직 수행"

  is_price_breakout:
    description: "현재 시가가 이전 블록의 고점 대비 -N% 이상인지 체크 (레벨업 판단)"
    parameters:
      - name: prev_block_id
        type: str
        description: "이전 블록 ID (예: 'block1')"
        required: true
      - name: tolerance_pct
        type: float
        description: "허용 하락 퍼센트 (예: 10.0 = -10%까지 허용)"
        required: true
    returns:
      type: bool
      description: "True면 현재 시가가 baseline 대비 -N% 이상, False면 조건 불만족"
    usage: "is_price_breakout('block1', 10.0)"
    examples:
      - "is_price_breakout('block1', 10.0)  # Block1 고점 대비 -10% 이상에서 시작"
      - "is_price_breakout('block1', 5.0)   # Block1 고점 대비 -5% 이상에서 시작"
      - "is_price_breakout('block2', 15.0)  # Block2 고점 대비 -15% 이상에서 시작"
    notes:
      - "기준점(baseline) 결정: 아래 값 중 가장 **작은** 값 사용 (보수적 접근)"
      - "  1) 이전 블록의 peak_price (전체 범위 중 최고가)"
      - "  2) spot2의 high (spot2가 있으면)"
      - "  3) spot1의 high (spot2가 없고 spot1이 있으면)"
      - "계산: current.open >= baseline * (1 - tolerance_pct/100)"
      - "Block2의 entry_conditions에서 사용 권장 (Block1 대비 레벨업 체크)"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Function Extension Guide - 새 함수 추가 방법
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

extension_guide:
  how_to_add_new_function:
    step1:
      description: "builtin_functions.py에 새 함수 작성"
      code: |
        @function_registry.register(
            'my_function',
            category='custom',
            description='내 함수 설명',
            params_schema={'param1': int}
        )
        def my_function(param1: int, context: dict) -> float:
            # 함수 구현
            return result

    step2:
      description: "function_library.yaml에 함수 문서 추가"
      code: |
        custom:
          my_function:
            description: "내 함수 설명"
            parameters:
              - name: param1
                type: int
                description: "파라미터 설명"
                required: true
            returns:
              type: float
              description: "반환값 설명"

    step3:
      description: "테스트 작성"
      code: |
        def test_my_function():
            engine = ExpressionEngine(function_registry)
            context = {...}
            result = engine.evaluate("my_function(10)", context)
            assert result == expected

  best_practices:
    - "함수명은 명확하고 직관적으로 작성"
    - "파라미터는 최소화하되, 필요한 경우 context로 추가 정보 전달"
    - "반환 타입을 명확히 정의 (bool, float, int, etc.)"
    - "에러 처리를 철저히 (유효하지 않은 입력 대비)"
    - "함수 문서화 필수 (docstring + 이 YAML 파일)"
