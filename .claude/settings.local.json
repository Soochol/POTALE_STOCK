{
  "permissions": {
    "allow": [
      "Bash(python -c \"\nfrom src.domain.entities.conditions.seed_condition import SeedCondition\nfrom src.domain.entities.conditions.redetection_condition import RedetectionCondition\nfrom src.domain.entities.conditions import BaseEntryCondition\n\nprint(''[OK] SeedCondition import successful!'')\nprint(''[OK] RedetectionCondition import successful!'')\nprint(''[OK] BaseEntryCondition import successful!'')\nprint('''')\nprint(''=== REFACTORING COMPLETE ==='')\nprint(''Both SeedCondition and RedetectionCondition reorganized!'')\nprint(''Variable order now follows block-based grouping:'')\nprint(''  - Block1: base (+ tolerance_pct for redetection)'')\nprint(''  - Block2: 추가조건 (+ tolerance_pct) + 전용파라미터'')\nprint(''  - Block3: 추가조건 (+ tolerance_pct) + 전용파라미터'')\nprint(''  - Block4: 추가조건 (+ tolerance_pct) + 전용파라미터'')\n\")",
      "Bash(python -c \"\nfrom src.infrastructure.database.connection import DatabaseConnection\nfrom src.infrastructure.repositories.preset.seed_condition_preset_repository import SeedConditionPresetRepository\nfrom src.infrastructure.repositories.preset.redetection_condition_preset_repository import RedetectionConditionPresetRepository\n\ndb = DatabaseConnection(''data/database/stock_data.db'')\n\n# Seed Preset 로드 테스트\nseed_repo = SeedConditionPresetRepository(db)\nseed_cond = seed_repo.load(''default_seed'')\n\nprint(''[1/2] Seed Preset Load Test'')\nprint(f''  Name: default_seed'')\nprint(f''  Block1 entry_surge_rate: {seed_cond.base.block1_entry_surge_rate}'')\nprint(f''  Block2 volume_ratio: {seed_cond.block2_volume_ratio}'')\nprint(f''  Block2 min_candles: {seed_cond.block2_min_candles_after_block1}'')\nprint(f''  Block3 volume_ratio: {seed_cond.block3_volume_ratio}'')\nprint(f''  Block4 volume_ratio: {seed_cond.block4_volume_ratio}'')\nprint(''[OK] Seed preset loads successfully!\\n'')\n\n# Redetection Preset 로드 테스트\nredetect_repo = RedetectionConditionPresetRepository(db)\nredetect_cond = redetect_repo.load(''default_redetect'')\n\nprint(''[2/2] Redetection Preset Load Test'')\nprint(f''  Name: default_redetect'')\nprint(f''  Block1 entry_surge_rate: {redetect_cond.base.block1_entry_surge_rate}'')\nprint(f''  Block1 tolerance_pct: {redetect_cond.block1_tolerance_pct}'')\nprint(f''  Block2 volume_ratio: {redetect_cond.block2_volume_ratio}'')\nprint(f''  Block2 tolerance_pct: {redetect_cond.block2_tolerance_pct}'')\nprint(f''  Block3 tolerance_pct: {redetect_cond.block3_tolerance_pct}'')\nprint(f''  Block4 tolerance_pct: {redetect_cond.block4_tolerance_pct}'')\nprint(''[OK] Redetection preset loads successfully!'')\nprint('''')\nprint(''=== ALL TESTS PASSED ==='')\nprint(''Variable reordering does not break functionality!'')\n\")",
      "Bash(python -c \"\nfrom src.infrastructure.database.connection import DatabaseConnection\nfrom src.infrastructure.repositories.preset.seed_condition_preset_repository import SeedConditionPresetRepository\nfrom src.infrastructure.repositories.preset.redetection_condition_preset_repository import RedetectionConditionPresetRepository\n\ndb = DatabaseConnection(''data/database/stock_data.db'')\n\n# Seed Preset 로드 테스트\nseed_repo = SeedConditionPresetRepository(db)\nseed_cond = seed_repo.load(''default_seed'')\n\nprint(''[1/2] Seed Preset Load Test'')\nprint(f''  Name: default_seed'')\nprint(f''  Block1 entry_surge_rate: {seed_cond.base.block1_entry_surge_rate}'')\nprint(f''  Block2 volume_ratio: {seed_cond.block2_volume_ratio}'')\nprint(f''  Block2 min_candles: {seed_cond.block2_min_candles_after_block1}'')\nprint(f''  Block3 volume_ratio: {seed_cond.block3_volume_ratio}'')\nprint(f''  Block4 volume_ratio: {seed_cond.block4_volume_ratio}'')\nprint(''[OK] Seed preset loads successfully!'')\nprint('''')\n\n# Redetection Preset 로드 테스트\nredetect_repo = RedetectionConditionPresetRepository(db)\nredetect_cond = redetect_repo.load(''default_redetect'')\n\nprint(''[2/2] Redetection Preset Load Test'')\nprint(f''  Name: default_redetect'')\nprint(f''  Block1 entry_surge_rate: {redetect_cond.base.block1_entry_surge_rate}'')\nprint(f''  Block1 tolerance_pct: {redetect_cond.block1_tolerance_pct}'')\nprint(f''  Block2 volume_ratio: {redetect_cond.block2_volume_ratio}'')\nprint(f''  Block2 tolerance_pct: {redetect_cond.block2_tolerance_pct}'')\nprint(f''  Block3 tolerance_pct: {redetect_cond.block3_tolerance_pct}'')\nprint(f''  Block4 tolerance_pct: {redetect_cond.block4_tolerance_pct}'')\nprint(''[OK] Redetection preset loads successfully!'')\nprint('''')\nprint(''=== ALL TESTS PASSED ==='')\nprint(''Variable reordering does not break functionality!'')\n\")"
    ],
    "deny": [],
    "ask": []
  }
}
