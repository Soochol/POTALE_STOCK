{
  "permissions": {
    "allow": [
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name, block2_min_candles_after_block1 as ''B2_min'', block2_max_candles_after_block1 as ''B2_max'', block3_min_candles_after_block2 as ''B3_min'', block3_max_candles_after_block2 as ''B3_max'', block4_min_candles_after_block3 as ''B4_min'', block4_max_candles_after_block3 as ''B4_max'' FROM redetection_condition_preset WHERE name=''default_redetect'';\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT COUNT(*) as total FROM block1_detection WHERE condition_name=''redetection'' AND pattern_id IN (SELECT id FROM pattern WHERE ticker=''025980'');\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT COUNT(*) as ''Block1 Redetection'' FROM block1_detection WHERE condition_name=''redetection'' AND ticker=''025980'';\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT COUNT(*) as ''Block2 Redetection'' FROM block2_detection WHERE condition_name=''redetection'' AND ticker=''025980'';\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT COUNT(*) as ''Block3 Redetection'' FROM block3_detection WHERE condition_name=''redetection'' AND ticker=''025980'';\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT id, ticker, block1_seed_id, block2_seed_id, block3_seed_id FROM block_pattern WHERE ticker=''025980'' ORDER BY id DESC LIMIT 5;\")",
      "Bash(sqlite3 data/database/stock_data.db \"PRAGMA table_info(block_pattern);\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT pattern_id, ticker, seed_block1_id, seed_block2_id, seed_block3_id FROM block_pattern WHERE ticker=''025980'' ORDER BY pattern_id DESC LIMIT 5;\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT COUNT(*) FROM block1_detection WHERE condition_name=''redetection'' AND pattern_id=73;\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT pattern_id, COUNT(*) as redetect_count FROM block1_detection WHERE condition_name=''redetection'' AND ticker=''025980'' GROUP BY pattern_id ORDER BY redetect_count DESC LIMIT 5;\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT pattern_id FROM block1_detection WHERE condition_name=''redetection'' AND ticker=''025980'' LIMIT 5;\")",
      "Bash(sqlite3 data/database/stock_data.db \"PRAGMA table_info(block1_detection);\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT pattern_id, started_at FROM block1_detection WHERE condition_name=''redetection'' AND ticker=''025980'' ORDER BY started_at LIMIT 10;\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT pattern_id, COUNT(*) as count FROM block1_detection WHERE condition_name=''redetection'' GROUP BY pattern_id ORDER BY pattern_id;\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT pattern_id, condition_name, started_at FROM block1_detection WHERE ticker=''025980'' AND condition_name=''redetection'' ORDER BY started_at LIMIT 10;\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT pattern_id, condition_name, started_at FROM block1_detection WHERE ticker=''025980'' AND condition_name=''redetection'' ORDER BY pattern_id, started_at LIMIT 10;\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT DISTINCT pattern_id FROM block1_detection WHERE condition_name=''redetection'' ORDER BY pattern_id;\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT pattern_id, COUNT(*) as count FROM block1_detection WHERE condition_name=''redetection'' AND pattern_id IS NOT NULL GROUP BY pattern_id ORDER BY pattern_id;\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT pattern_id, ticker, seed_block1_id FROM block_pattern WHERE ticker=''025980'' ORDER BY pattern_id DESC LIMIT 5;\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT pattern_id, COUNT(*) FROM block2_detection WHERE condition_name=''redetection'' AND pattern_id IS NOT NULL GROUP BY pattern_id ORDER BY pattern_id;\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT pattern_id, COUNT(*) FROM block3_detection WHERE condition_name=''redetection'' AND pattern_id IS NOT NULL GROUP BY pattern_id ORDER BY pattern_id;\")",
      "Bash(git add -A)",
      "Bash(del \"data\\database\\stock_data.db\")",
      "Bash(if not exist .vscode mkdir .vscode)",
      "Bash(git checkout:*)",
      "Bash(if [ -d \"migrations\" ])",
      "Bash(then echo \"migrations folder exists\")",
      "Bash(else mkdir migrations)",
      "Bash(for file in src/infrastructure/repositories/detection/block{2,3,4}_repository.py)",
      "Bash(do)",
      "Bash(if grep -q \"from sqlalchemy.orm import joinedload\" \"$file\")",
      "Bash(then)",
      "Bash(echo:*)",
      "Bash(else)",
      "Bash(done)",
      "Bash(.venvScriptspython.exe migrationsmigrate_add_peak_volume_to_block1.py)",
      "Bash(\".venv/Scripts/python.exe\" migrations/migrate_add_peak_volume_to_block1.py)",
      "Bash(\".venv/Scripts/python.exe\" -m pip install pytest pytest-cov pytest-asyncio pytest-mock faker --quiet)",
      "Bash(\".venv/Scripts/python.exe\" -m pytest tests/unit/entities/test_block1_detection.py -v)",
      "Bash(\".venv/Scripts/python.exe\" -m pytest:*)",
      "Bash(uv pip list:*)",
      "Bash(uv pip install:*)",
      "Bash(uv run python:*)",
      "Bash(sqlite3:*)",
      "Bash(\".venv/Scripts/python.exe\" migrations/migrate_remove_high_above_ma.py)",
      "Bash(\".venv/Scripts/python.exe\" scripts/update_presets_from_yaml.py)",
      "Bash(\".venv/Scripts/python.exe\" migrations/migrate_rename_months_to_days.py)",
      "Bash(\".venv/Scripts/python.exe\" scripts/detect_patterns.py --ticker 025980 --from-date 2015-01-01)",
      "Bash(\".venv/Scripts/python.exe\" scripts/detect_patterns.py --ticker 025980 --from-date 2015-01-01 --verbose)",
      "Bash(timeout:*)",
      "Bash(git add:*)",
      "Bash(git rm:*)",
      "Bash(git push)",
      "Bash(git commit:*)",
      "Bash(\".venv/Scripts/python.exe\" scripts/collect_single_ticker.py --ticker 180640 --from-date 2015-01-01)",
      "Bash(\".venv/Scripts/python.exe\" scripts/detect_patterns.py --ticker 180640 --from-date 2015-01-01 --verbose)",
      "Bash(copy datadatabasestock_data.db datadatabasestock_data_backup_before_cooldown_rename.db)",
      "Bash(\".venv/Scripts/python.exe\" migrations/migrate_rename_cooldown_to_min_start_interval.py)",
      "Bash(\".venv/Scripts/python.exe\" -m pytest tests/unit/entities/test_base_entry_condition.py -v)",
      "Bash(copy:*)",
      "Bash(\".venv/Scripts/python.exe\" migrations/migrate_unified_schema_update.py)",
      "Bash(python migrations/migrate_unified_schema_update.py:*)",
      "Bash(python scripts/update_presets_from_yaml.py:*)",
      "Bash(python:*)",
      "Bash(\".venv/Scripts/python.exe\" migrations/verify_system_health.py)",
      "Bash(\".venv/Scripts/python.exe\" migrations/migrate_add_auto_exit_on_next_block.py)",
      "Bash(.venv/Scripts/python.exe:*)",
      "Bash(del data/database/stock_data.db)",
      "Bash(git log:*)",
      "Bash(\".venv/Scripts/python.exe\" -m pytest tests/unit/infrastructure/test_price_utils.py -v)",
      "Bash(.venv/Scripts/python.exe -m pytest tests/unit/infrastructure/test_price_utils.py -v)",
      "Bash(if not exist docsarchive mkdir docsarchive)",
      "Bash(git mv:*)",
      "Bash(del srclearningfeature_engineeringdataset_builder.py srclearningmodelsblock_classifier.py)",
      "Bash(del scriptsml_systemgenerate_synthetic_labels.py scriptsml_systemimport_block_labels.py scriptsml_systembuild_block_dataset.py scriptsml_systemtrain_block_classifier.py scriptsml_systemtest_full_pipeline.py)",
      "Bash(del migrationsmigrate_add_block_label_table.py)",
      "Bash(move docsspecificationAI_BLOCK_DETECTION.md docsarchiveAI_BLOCK_DETECTION_V1.md)",
      "Bash(del presetsfeature_configsblock_classifier_v1.yaml)",
      "Read(//c/**)",
      "Bash(cd:*)",
      "Bash(findstr:*)",
      "Bash(git push:*)",
      "Bash(git tag:*)",
      "Bash(tree:*)",
      "Bash(if not exist srclearningevaluation mkdir srclearningevaluation)",
      "Bash(if not exist testsunitlearning mkdir testsunitlearning)",
      "Bash(if not exist testsunitlearningevaluation mkdir testsunitlearningevaluation)",
      "Bash(dir:*)",
      "Bash(if exist test_indicator_debug.py del test_indicator_debug.py)",
      "Bash(if exist test_block2_conditions.py del test_block2_conditions.py)",
      "Bash(PYTHONIOENCODING=utf-8 python:*)",
      "Bash(awk:*)",
      "Bash(c:/myCode/potale_stock/.venv/Scripts/python.exe:*)",
      "Bash(set PYTHONIOENCODING=utf-8:*)",
      "Bash(export PYTHONIOENCODING=utf-8)",
      "Bash(if not exist docsarchivelegacy_codecli mkdir docsarchivelegacy_codecli)",
      "Bash(if not exist docsarchivelegacy_codedomainentitiescore mkdir docsarchivelegacy_codedomainentitiescore)",
      "Bash(if not exist docsarchivelegacy_codedomainentitiesconditions mkdir docsarchivelegacy_codedomainentitiesconditions)",
      "Bash(if not exist docsarchivelegacy_codedomainrepositories mkdir docsarchivelegacy_codedomainrepositories)",
      "Bash(if not exist docsarchivelegacy_codeinfrastructurecollectors mkdir docsarchivelegacy_codeinfrastructurecollectors)",
      "Bash(if not exist docsarchivelegacy_codeinfrastructurerepositoriescondition mkdir docsarchivelegacy_codeinfrastructurerepositoriescondition)",
      "Bash(find:*)",
      "Bash(cat:*)",
      "Bash(if not exist srcinfrastructurelogging mkdir srcinfrastructurelogging)",
      "Bash(.venvScriptspython.exe scriptsrule_based_detectiondetect_patterns.py --ticker 025980 --config presetsexamplestest1_alt.yaml --from-date 2015-01-01 --verbose)",
      "Bash(Select-String -Pattern \"2018-03-07\" -Context 5,5)",
      "Bash(venv/Scripts/python.exe:*)",
      "Bash(del test_pattern_detection.py)",
      "Bash(if [ -f test_pattern_detection.py ])",
      "Bash(then rm test_pattern_detection.py)",
      "Bash(else echo \"File not found\")",
      "Bash(fi)",
      "Bash(c:\\myCode\\potale_stock\\.venv\\Scripts\\python.exe -m pytest tests/unit/entities/conditions/test_builtin_functions_redetection.py -v --no-cov)",
      "Bash(/c/myCode/potale_stock/.venv/Scripts/python.exe -m pytest:*)",
      "Bash(cmd.exe:*)",
      "Bash(del:*)",
      "Bash(/c/myCode/potale_stock/.venv/Scripts/python.exe scripts/rule_based_detection/detect_patterns.py --ticker 025980 --config presets/examples/test1_alt.yaml --from-date 2020-01-01)",
      "Bash(xargs -r kill:*)",
      "Bash(if exist scriptsreentrydetect_reentry.py del scriptsreentrydetect_reentry.py)",
      "Bash(\"/c/myCode/potale_stock/.venv/Scripts/python.exe\" migrations/migrate_add_virtual_block_system.py)",
      "Bash(PYTHONIOENCODING=utf-8 echo:*)",
      "Bash(if [ -f data/database/stock_data.db ])",
      "Bash(then rm data/database/stock_data.db)",
      "Bash(else echo \"DB not found\")",
      "Bash(for db in data/database/stock_data_backup*.db)",
      "Bash(do echo \"=== $db ===\")",
      "Bash(tee:*)",
      "Bash(/c/myCode/potale_stock/.venv/Scripts/python.exe:*)",
      "Bash(cmd /c \"c:\\myCode\\potale_stock\\.venv\\Scripts\\python.exe scripts\\rule_based_detection\\detect_patterns.py --ticker 025980 --config presets\\examples\\test_simple_conditions.yaml --from-date 2015-01-01\")",
      "Bash(for file in presets/examples/test_simple_conditions.yaml presets/examples/test_virtual_block.yaml)",
      "Bash(for file in extended_pattern_example.yaml simple_pattern_example.yaml with_redetection_example.yaml seed_redetection_pair.yaml redetection_simple.yaml)",
      "Bash(do echo \"Processing $file...\")",
      "Bash(for file in test1.yaml test1_alt_block1_only.yaml test1_alt_minimal.yaml test1_alt_debug.yaml test_debug_simple.yaml test_volume_only.yaml test_ma.yaml test_direct.yaml)",
      "Bash(\"/c/myCode/potale_stock/.venv/Scripts/python.exe\" -c \"from src.application.services.block_graph_loader import BlockGraphLoader; graph = BlockGraphLoader.load_from_yaml(''presets/examples/test1_alt.yaml''); print(f''✅ YAML loaded successfully: {len(graph.nodes)} nodes'')\")",
      "Bash(git rev-parse:*)",
      "Bash(\"/c/myCode/potale_stock/.venv/Scripts/python.exe\":*)",
      "Bash(c:\\myCode\\potale_stock\\.venv\\Scripts\\python.exe:*)",
      "Bash(.venvScriptspython.exe verify_forward_spot.py)",
      "Bash(.venvScriptspython.exe -m pytest tests/unit/entities/test_builtin_functions_forward_spot.py -v --no-cov)",
      "Bash(where:*)",
      "Bash(git pull:*)"
    ],
    "deny": [],
    "ask": []
  }
}
