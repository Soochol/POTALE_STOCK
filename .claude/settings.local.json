{
  "permissions": {
    "allow": [
      "Bash(timeout 60 python -c \"\nfrom src.infrastructure.repositories.block1_repository import Block1Repository\nfrom src.infrastructure.database.connection import DatabaseConnection\nfrom datetime import date\n\ndb_conn = DatabaseConnection(''data/database/stock_data.db'')\nblock1_repo = Block1Repository(db_conn)\n\n# 아난티의 모든 Block1 조회\nall_blocks = block1_repo.find_by_ticker(''025980'')\n\nprint(f''아난티 전체 Block1: {len(all_blocks)}건'')\nprint(''=''*70)\n\nfor i, block in enumerate(all_blocks, 1):\n    print(f''[{i}] {block.condition_name}: {block.started_at} ~ {block.ended_at}'')\n    if block.peak_gain_ratio:\n        print(f''    수익률: +{block.peak_gain_ratio:.2f}%'')\n\")",
      "Bash(timeout 60 python -c \"\nfrom src.infrastructure.repositories.sqlite_stock_repository import SqliteStockRepository\nfrom datetime import date, timedelta\n\nrepo = SqliteStockRepository(''data/database/stock_data.db'')\n\n# 2018-03-07 전후 데이터\nstart = date(2018, 3, 1)\nend = date(2018, 3, 15)\nstocks = repo.get_stock_data(''025980'', start, end)\n\nprint(''2018년 3월 초 아난티 데이터:'')\nprint(''=''*70)\nfor s in stocks:\n    rate = ((s.high - stocks[stocks.index(s)-1].close) / stocks[stocks.index(s)-1].close * 100) if stocks.index(s) > 0 else 0\n    print(f''{s.date}: 시가={s.open:5.0f} 고가={s.high:5.0f} 저가={s.low:5.0f} 종가={s.close:5.0f} 등락률={rate:+6.2f}% 거래량={s.volume:,}'')\n\")",
      "Bash(uv pip show rich)",
      "Bash(timeout 60 python save_all_conditions.py)",
      "Bash(timeout 60 python test_block23_different_conditions.py)",
      "Bash(awk '{print $NF}')",
      "Bash(timeout 60 python bulk_collect.py --tickers 005930 --from 2025-01-17 --to 2025-01-17 --investor --concurrency 1)",
      "Bash(timeout 60 python test_pattern_models.py)",
      "Bash(timeout 60 python migrate_add_pattern_columns.py)",
      "Bash(timeout 60 python save_pattern_presets.py)",
      "Bash(timeout 60 python test_pattern_detection_ananti.py)",
      "Bash(timeout 60 python -c \"\nfrom src.infrastructure.repositories.sqlite_stock_repository import SqliteStockRepository\nfrom datetime import date\n\nrepo = SqliteStockRepository(''data/database/stock_data.db'')\nstocks = repo.get_stock_data(''025980'', date(2015, 1, 1), date(2025, 10, 18))\n\nprint(f''아난티 데이터: {len(stocks)}건'')\nif len(stocks) > 0:\n    print(f''기간: {stocks[0].date} ~ {stocks[-1].date}'')\nelse:\n    print(''데이터 없음 - 수집 필요'')\n\")",
      "Bash(sqlite3 data/database/stock_data.db \".schema seed_condition_presets\")",
      "Bash(sqlite3 data/database/stock_data.db \".schema redetection_condition_presets\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT ticker, MIN(date) as first_date, MAX(date) as last_date, COUNT(*) as count FROM stock_price WHERE ticker=''025980'' GROUP BY ticker\")",
      "Bash(timeout 60 python test_ananti_full_detection.py)",
      "Bash(timeout 60 python migrate_rename_block23_params.py)",
      "Bash(timeout 30 python migrate_add_block4_columns.py)",
      "Bash(sqlite3 data/database/stock_data.db \".tables\")",
      "Bash(sqlite3 data/database/stock_data.db \".schema block1_condition_preset\")",
      "Bash(sqlite3 data/database/stock_data.db \".schema block2_condition_preset\")",
      "Bash(sqlite3 data/database/stock_data.db \".schema block3_condition_preset\")",
      "Bash(sqlite3 data/database/stock_data.db \".schema block4_condition_preset\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name FROM seed_condition_preset\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT block4_volume_ratio, block4_low_price_margin, block4_min_candles_after_block3 FROM seed_condition_preset WHERE name=''aggressive_seed''\")",
      "Bash(timeout 60 python update_presets_from_json.py)",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT COUNT(*) as count, ''block1_condition_preset'' as table_name FROM block1_condition_preset UNION ALL SELECT COUNT(*), ''block2_condition_preset'' FROM block2_condition_preset UNION ALL SELECT COUNT(*), ''block3_condition_preset'' FROM block3_condition_preset UNION ALL SELECT COUNT(*), ''block4_condition_preset'' FROM block4_condition_preset\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name, block4_volume_ratio, block4_low_price_margin, block4_min_candles_after_block3 FROM seed_condition_preset\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name, block4_volume_ratio, block4_low_price_margin, block4_min_candles_after_block3, block4_tolerance_pct FROM redetection_condition_preset\")",
      "Bash(timeout 60 python update_presets_from_json.py --dry-run)",
      "Bash(sqlite3 data/database/stock_data.db \".schema seed_condition_preset\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name, entry_surge_rate, block2_volume_ratio, block3_volume_ratio, block4_volume_ratio FROM seed_condition_preset\")",
      "Bash(timeout 60 python migrate_add_blockN_all_params.py)",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name, entry_surge_rate, block2_entry_surge_rate, block3_entry_surge_rate, block4_entry_surge_rate FROM seed_condition_preset\")",
      "Bash(timeout 60 python test_block_specific_params.py)",
      "Bash(timeout 30 python test_refactored_block1.py)",
      "Bash(python test_pattern_detection_ananti.py)",
      "Bash(python test_ananti_full_detection.py)",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name FROM sqlite_master WHERE type=''table'' AND name LIKE ''%condition_preset%''\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT COUNT(*) FROM block1_condition_preset\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name FROM block1_condition_preset\")",
      "Bash(sqlite3 data/database/stock_data.db \"DROP TABLE IF EXISTS block1_condition_preset; DROP TABLE IF EXISTS block2_condition_preset; DROP TABLE IF EXISTS block3_condition_preset; DROP TABLE IF EXISTS block4_condition_preset;\")",
      "Bash(python migrate_add_block1_prefix.py)",
      "Bash(sqlite3 data/database/stock_data.db \"PRAGMA table_info(seed_condition_preset)\")",
      "Bash(python update_repository_field_names.py)",
      "Bash(python update_service_field_names.py)",
      "Bash(python update_test_field_names.py)",
      "Bash(python test_refactored_block1.py)",
      "Bash(python fix_double_block1_prefix.py)",
      "Bash(python fix_blockN_specific_params.py)",
      "Bash(sqlite3 data/database/stock_data.db \"PRAGMA table_info(block1_condition_preset)\")",
      "Bash(sqlite3 data/database/stock_data.db \"\nDROP TABLE IF EXISTS block1_condition_preset;\nDROP TABLE IF EXISTS block2_condition_preset;\nDROP TABLE IF EXISTS block3_condition_preset;\nDROP TABLE IF EXISTS block4_condition_preset;\n\")",
      "Bash(python test_ananti_naver_collection.py)",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name FROM redetection_condition_preset\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name, block1_entry_surge_rate, block1_entry_ma_period, block1_entry_high_above_ma, block1_cooldown_days, block2_entry_surge_rate, block2_volume_ratio FROM seed_condition_preset WHERE name=''aggressive_seed''\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name, block1_entry_surge_rate, block1_entry_ma_period, block1_exit_ma_period, block1_cooldown_days, block1_tolerance_pct, block2_entry_surge_rate, block2_volume_ratio FROM redetection_condition_preset WHERE name=''aggressive_redetect''\")",
      "Bash(python check_preset_sync.py)",
      "Bash(python check_preset_names.py)",
      "Bash(sqlite3 data/database/stock_data.db \"\nDELETE FROM seed_condition_preset WHERE name IN (''standard_seed'', ''conservative_seed'');\nDELETE FROM redetection_condition_preset WHERE name IN (''standard_redetect'', ''conservative_redetect'');\n\")",
      "Bash(sqlite3 data/database/stock_data.db \"\nDELETE FROM seed_condition_preset WHERE name = ''aggressive_seed'';\nDELETE FROM redetection_condition_preset WHERE name = ''aggressive_redetect'';\n\")",
      "Bash(sqlite3 data/database/stock_data.db \"PRAGMA table_info(redetection_condition_preset)\")",
      "Bash(python update_presets_from_json.py --dry-run)",
      "Bash(python update_presets_from_json.py)",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name, block2_min_candles_after_block1, block3_min_candles_after_block2, block4_min_candles_after_block3 FROM seed_condition_preset WHERE name=''default_seed''\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name, block2_min_candles_after_block1, block3_min_candles_after_block2, block4_min_candles_after_block3 FROM redetection_condition_preset WHERE name=''default_redetect''\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT COUNT(*) FROM seed_condition_preset\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT COUNT(*) FROM redetection_condition_preset\")",
      "Bash(python migrate_reorder_preset_columns.py)",
      "Bash(sqlite3 data/database/stock_data.db \"DROP TABLE IF EXISTS seed_condition_preset_new; DROP TABLE IF EXISTS redetection_condition_preset_new;\")",
      "Bash(sqlite3 data/database/stock_data.db \"SELECT name, block2_min_candles_after_block1, block3_min_candles_after_block2, block4_min_candles_after_block3 FROM seed_condition_preset\")",
      "Bash(python -c \"\nfrom src.infrastructure.database.connection import DatabaseConnection\nfrom src.infrastructure.repositories.seed_condition_preset_repository import SeedConditionPresetRepository\nfrom src.infrastructure.repositories.redetection_condition_preset_repository import RedetectionConditionPresetRepository\n\ndb = DatabaseConnection(''data/database/stock_data.db'')\n\n# Seed Preset 로드 테스트\nseed_repo = SeedConditionPresetRepository(db)\nseed_cond = seed_repo.load(''default_seed'')\n\nprint(''[Seed Preset Load Test]'')\nprint(f''Name: default_seed'')\nprint(f''Block1 entry_surge_rate: {seed_cond.base.block1_entry_surge_rate}'')\nprint(f''Block2 min_candles_after_block1: {seed_cond.block2_min_candles_after_block1}'')\nprint(f''Block3 min_candles_after_block2: {seed_cond.block3_min_candles_after_block2}'')\nprint(f''Block4 min_candles_after_block3: {seed_cond.block4_min_candles_after_block3}'')\nprint(''[OK] Seed preset load successful!\\n'')\n\n# Redetection Preset 로드 테스트\nredetect_repo = RedetectionConditionPresetRepository(db)\nredetect_cond = redetect_repo.load(''default_redetect'')\n\nprint(''[Redetection Preset Load Test]'')\nprint(f''Name: default_redetect'')\nprint(f''Block1 entry_surge_rate: {redetect_cond.base.block1_entry_surge_rate}'')\nprint(f''Block1 tolerance_pct: {redetect_cond.block1_tolerance_pct}'')\nprint(f''Block2 min_candles_after_block1: {redetect_cond.block2_min_candles_after_block1}'')\nprint(f''Block2 tolerance_pct: {redetect_cond.block2_tolerance_pct}'')\nprint(''[OK] Redetection preset load successful!'')\n\")",
      "Bash(python -c \"from src.application.services.checkers.block1_checker import Block1Checker; from src.application.services.detectors.pattern_seed_detector import PatternSeedDetector; from src.application.services.indicators.block1_indicator_calculator import Block1IndicatorCalculator; from src.application.use_cases.block_detection.detect_block1 import DetectBlock1UseCase; from src.application.use_cases.pattern_detection.detect_patterns import DetectPatternsUseCase; print(''All imports successful!'')\")",
      "Bash(python -c \"from src.application.services.checkers.block1_checker import Block1Checker; from src.application.services.detectors.pattern_seed_detector import PatternSeedDetector; from src.application.services.indicators.block1_indicator_calculator import Block1IndicatorCalculator; from src.application.use_cases.block_detection.detect_block1 import DetectBlock1UseCase; from src.application.use_cases.pattern_detection.detect_patterns import DetectPatternsUseCase; print(''All imports successful'')\")",
      "Bash(python test_ananti_patterns.py)",
      "Bash(git add -A)"
    ],
    "deny": [],
    "ask": []
  }
}
